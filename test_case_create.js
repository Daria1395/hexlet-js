const name = 'Трекер'; // ввести наименование лендинга
const token = 'Yy1_AQAD-qJSLNaFAAAGawAAAAAASrM2AAANmpnrK4hA85W5v3ieMPxpilLEUg'; // Замените 'YOUR_ACCESS_TOKEN' на ваш реальный токен https://oauth.yandex-team.ru/authorize?response_type=token&client_id=6d967b191847496a8a7077e2e636142f
const url = 'https://testpalm-api.yandex-team.ru/testcases/tuning360/bulk';

let environment = ['','[touch]'];
let landing = `[Лендинг ${name}]`;

// универсальные проверки не по блокам
const getCustomNames = (currentEnvironment) => {
  return [
      'Внешний вид на .ru', //скрин всей страницы + на русском языке
      'Внешний вид на .ru на разных разрешениях', //скрин всей страницы, по метрике определиться с шириной экрана тач и десктоп
      ...(currentEnvironment === '' ? ['Внешний вид [tablet]'] : []), // Внешний вид [tablet] будет включен только для '' (пустого) окружения
      'Внешний вид на .com', //скрин всей страницы
      'Внешний вид на .by', //скрин всей страницы
      'Смена языков', //весь контент должен быть на соответствующем языке, даже картинки 
      'Отображение блока 1', //опционально, если не подходит скрин всей страницы
      'Отображение блока 2', //опционально, если не подходит скрин всей страницы
      'Отображение блока 3', //опционально, если не подходит скрин всей страницы
      'Отображение заглушки',
      'Отображение анимаций старницы'
  ];
}

//проверки по блокам и отдельным действиям в них 
let getActionsMap = (currentEnvironment) => {
  return {
    'Шапка': 
    [
        'Отображение шторкой',
        ...(currentEnvironment === '[touch]' ? ['Тап в бургер'] : []), // Тап в бургер будет включен только для [touch] окружения 
        'Скрытие шапки',
        '“О сервисах”. Переход по ссылкам', //+отображение самого попапа
        '“Решения”. Переход по ссылкам',  //+отображение самого попапа
        'Клик в "Тарифы"', 
        'Клик по логотипу', 
        'Отображение мультиавторизации', //сам попап не наш, но проверяем кликабельность и отображение
        'Клик по "Войти"',
        ...(currentEnvironment === '[touch]' ? ['Клик в “Подключить” авторизованным юзером'] : []), , //для б2б,только тач
        ...(currentEnvironment === '[touch]' ? ['Клик в “Подключить” неавторизованным юзером'] : []), , //для б2б,только тач
        ...(currentEnvironment === '' ? ['Ховер кнопки "Купить"'] : []), //для б2с, только в десктопе
        ...(currentEnvironment === '[touch]' ? ['Клик в “Купить” авторизованным юзером'] : []), , //для б2с,только тач
        ...(currentEnvironment === '[touch]' ? ['Клик в “Купить” неавторизованным юзером'] : []), , //для б2с,только тач
    ],
    'Карточки тарифов': //для б2с тарифов
    [
        'Отображение личных тарифов',
        'Отображение семейных тарифов',
        'Переключение карточек по стрелкам', //при узких экранах
        'По клику в кнопку открывается попап оплаты',
        'Клик в кнопку без авторизации',
        'Переключение месяц-год личные тарифы',
        'Переключение месяц-год семейные тарифы',
        'Переключение карточек по стрелкам',
        'Кнопка “Ваш текущий тариф”', //отображается кнопка ваш тариф
        'Отображение личных тарифов: один тариф', //когда куплен максимальный на месяц и остается апгрейд только на годовой, отсутвует переключение на месяц
        'Отображение личных тарифов: два тарифа', //когда куплен средний на месяц и остается апгрейд только на 2 годовых, отсутвует переключение на месяц
        'Отображение личных тарифов: более 3 тарифов', //появляются стрелочки
        'Отображение личных тарифов: тултип раздела', 
        'Отображение семейных тарифов: куплен на месяц', //куплен на месяц
        'Отображение семейных тарифов: тултип раздела',  //куплен на год
        'Отображение семейных тарифов: тултип раздела (пдд)',  //куплен на год
        'Отсутвие апгрейда личных и семейных' 
    ],
    'Карточки тарифов': //для б2б тарифов
    [
        'Отображение тарифов',
        'По клику в кнопку переход в админку', //проверки ссылок по каждой кнопке
        'По клику в кнопку переход в админку незалогином' //проверки ссылок по каждой кнопке
    ],


    'Карусель КАКАЯ-ТО': 
    [
        'Ховер неактивного элемента', // элемент можно заменить на название элемента карусели
        'Выбор каждого элемента', // элемент можно заменить на название элемента карусели
        'Листание стрелками-кнопками',
        'Листание тачпадом',
        'Изменение верстки на узких экранах' //оперделиться с разрешением
    ],
    'Промокод': 
    [
        'Клик в кнопку', 
        'Активация промокода', //тут проверяем активацию поля и кнопки приминения
        'Активация невалидного промокода',
        'Активация ранее примененного промокода',
        'Отмена примененного промокода',
        'Клик по ссылке условий',
        'Закрытие попапа по крестику'
    ],
    'Кнопка "Подключить"': 
    [
        'Отображение', //во всех местах страницы
        'Клик в кнопку' //во всех местах страницы
    ],
    'Кнопка "Купить"': 
    [
        'Отображение', //во всех местах страницы
        'Клик в кнопку' //во всех местах страницы
    ],
    'Кнопка КАКАЯ-ЛИБО': 
    [
        'Отображение', //например плавающая
        'Клик в кнопку'
    ],
    'FAQ': 
    [
        'Разворачивание/сворачивание всех пунктов', 
        'Переход по встроенным ссылкам'
    ],
    'Футер': 
    [
        'Клик по логотипу', 
        'Переход по ссылкам'
    ]
  }
};


// формирование массива объектов для пробрасывание в тело балкового запроса 
const namesArray = [];

environment.forEach((env) => {
    const customNames = getCustomNames(env);
    const actionsMap = getActionsMap(env);
    
    customNames.forEach((name) => {
        namesArray.push(`${env}${landing} ${name}`)
    })
    for (const [key, actions] of Object.entries(actionsMap)) {
      actions.forEach((action) => {
          namesArray.push(`${env}${landing} ${key}. ${action}`);
      })
  }
});

console.log(namesArray) //вывод полученного чек-листа

/*
// Весь код ниже -  создание тест-кейсов в тестпалме

// Ключи и их значения
const attributes = {
  "61ed3d6ece5c29005a852899": ["oreo"]
};

const testCases = namesArray.map(name => ({ name, attributes }));

fetch(url, {
  method: 'POST',
  headers: {
    'Authorization': `OAuth ${token}`,
    'Accept': 'application/json',
    'Content-Type': 'application/json'
  },
  body: JSON.stringify(testCases)
})
.then(response => response.json())
.then(data => {
  // Используем элементы вывода с id и соответствующими им элементами из namesArray
  data.forEach((element, index) => {
    const id = element;
    const name = namesArray[index];
    console.log(`ID-${id}: ${name}`);

  });
})
.catch(error => {
  console.error('Ошибка при отправке запроса:', error);
});
*/